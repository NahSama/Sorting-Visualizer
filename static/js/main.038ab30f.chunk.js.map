{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingVisualiser/SortingVisualizer.jsx","SortingAlgorithms/BubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimation","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","midIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimation","QuickSort","arr","index","left","right","len","partition","middle","pivot","Sortingvisualizer","props","state","speed","inputQty","toggle","this","resetArray","setState","min","max","random","animationSpeedMs","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","auxiliarayArray","bubbleSort","console","log","getBubbleSortAnimation","className","type","defaultValue","onChange","e","handleChangeInputQty","target","value","handleChangeSpeed","onClick","mergeSort","quickSort","map","key","width","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sSAAO,SAASA,EAAsBC,GAClC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAG7B,OAGJ,SAASC,EACLC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAGM,IAAaC,EAAQ,OACxB,IAAMC,EAASC,KAAKC,OAAOJ,EAAWC,GAAQ,GAC9CH,EAAgBF,EAAgBI,EAAUE,EAAQH,EAAWL,GAC7DI,EAAgBF,EAAgBM,EAAS,EAAGD,EAAQF,EAAWL,GAInE,SACIK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAQ,EAChB,KAAMI,GAAKJ,GAAUK,GAAKN,GAGtBP,EAAWc,KAAK,CAACF,EAAGC,IAEpBb,EAAWc,KAAK,CAACF,EAAGC,IACjBX,EAAeU,IAAMV,EAAeW,IAEnCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAEhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAKxC,KAAMD,GAAKJ,GACPR,EAAWc,KAAK,CAACF,EAAGA,IACpBZ,EAAWc,KAAK,CAACF,EAAGA,IACpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAGpC,KAAMC,GAAKN,GACPP,EAAWc,KAAK,CAACD,EAAGA,IACpBb,EAAWc,KAAK,CAACD,EAAGA,IACpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KA1CpCE,CAAQV,EAAWC,EAAUE,EAAQD,EAAQL,EAAgBF,GAf7DI,CADkBL,EAAMI,QACG,EAAGJ,EAAME,OAAS,EAAGC,EAAgBF,GACzDA,ECNJ,SAASgB,EAAsBjB,GAClC,IAAMC,EAAa,GACnB,OAAID,EAAME,QAAU,EAAUF,GAWlC,SAASkB,EAAUC,EAAKlB,GAA+C,IAE/DmB,EAF4BC,EAAkC,uDAA3B,EAAGC,EAAwB,uDAAhBH,EAAIjB,OAAS,EAC3DqB,EAAMJ,EAAIjB,OAGXqB,EAAM,IAEPH,EAAQI,EAAUL,EAAKlB,EAAYoB,EAAMC,GAEtCD,EAAOD,EAAQ,GAChBF,EAAUC,EAAKlB,EAAYoB,EAAMD,EAAQ,GAGxCA,EAAQE,GACTJ,EAAUC,EAAKlB,EAAYmB,EAAOE,IAKtC,OAAOH,EA1BPD,CADuBlB,EAAMI,QACHH,GAEnBA,GA4BT,SAASuB,EAAUL,EAAKlB,EAAYoB,EAAMC,GAMxC,IALA,IAAIG,EAASf,KAAKC,OAAOW,EAAQD,GAAQ,GACrCK,EAAQP,EAAIM,GACZZ,EAAIQ,EACJP,EAAIQ,EAEFT,GAAKC,GAAG,CAIZ,KAAMK,EAAIN,GAAKa,GACbb,IACAZ,EAAWc,KAAK,CAAC,EAAGF,EAAGY,IACvBxB,EAAWc,KAAK,CAAC,EAAGF,EAAGY,IAKzB,KAAMN,EAAIL,GAAKY,GACbZ,IACAb,EAAWc,KAAK,CAAC,EAAGD,EAAGW,IACvBxB,EAAWc,KAAK,CAAC,EAAGD,EAAGW,IAKzB,GAAGZ,GAAKC,EAAG,CAAC,IAAD,EACU,CAACK,EAAIL,GAAIK,EAAIN,IAA/BM,EAAIN,GADI,KACAM,EAAIL,GADJ,KAETb,EAAWc,KAAK,CAAC,EAAGF,EAAGM,EAAIN,KAC3BZ,EAAWc,KAAK,CAAC,EAAGD,EAAGK,EAAIL,KAC3BD,IACAC,KAIJ,OAAOD,EC1DX,IAKqBc,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAO,EACPC,SAAU,GACV/B,MAAO,GACPgC,QAAQ,GAPG,E,gEAYfC,KAAKC,e,2CAGYH,GACjBE,KAAKE,SAAS,CAACJ,SAAUA,IACzBE,KAAKC,e,wCAGSJ,GACdG,KAAKE,SAAS,CAACL,MAAOA,M,mCAKtB,IADA,IAmIuBM,EAAKC,EAnItBrC,EAAQ,GACNa,EAAI,EAAGA,EAAIoB,KAAKJ,MAAME,SAAUlB,IACpCb,EAAMe,MAiIaqB,EAjIc,EAiITC,EAjIY,IAmIrC3B,KAAKC,MAAMD,KAAK4B,UAAYD,EAAMD,EAAM,GAAKA,KAjIhDH,KAAKE,SAAS,CAACnC,Y,kCAMf,IAFA,IAAMuC,EAAmBN,KAAKJ,MAAMC,MAC9B7B,EAAaF,EAAsBkC,KAAKJ,MAAM7B,OAF7C,WAGCa,GACJ,IAAM2B,EAAYC,SAASC,uBAAuB,aAElD,GADsB7B,EAAI,IAAM,EACf,CAAC,IAAD,cACkBZ,EAAWY,GAD7B,GACN8B,EADM,KACKC,EADL,KAEPC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQnC,EAAI,IAAM,EA7ChB,MAHF,OAiDNoC,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC/BnC,EAAE0B,QAELU,YAAW,WAAO,IAAD,cACkBhD,EAAWY,GAD7B,GACN8B,EADM,KACKQ,EADL,KAEOX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QACDtC,EAAE0B,IAjBL1B,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAK,EAAnCA,K,kCAyBR,IAFA,IAAM0B,EAAmBN,KAAKJ,MAAMC,MAC9B7B,EAAagB,EAAsBgB,KAAKJ,MAAM7B,OAF7C,WAGCa,GACJ,IAAM2B,EAAYC,SAASC,uBAAuB,aAElD,GAAc,IADCzC,EAAWY,GAAG,GACZ,CAAC,IAAD,cAC0BZ,EAAWY,GADrC,GACE8B,GADF,WACaC,EADb,KAEPC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQnC,EAAI,IAAM,EAtEhB,MAHF,OA0ENoC,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC/BnC,EAAE0B,QAELU,YAAW,WAAO,IAAD,cAC0BhD,EAAWY,GADrC,GACE8B,GADF,WACaQ,EADb,KAEOX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QACDtC,EAAE0B,IAjBL1B,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAK,EAAnCA,K,mCA0BR,IAFA,IAAM0B,EAAmBN,KAAKJ,MAAMC,MAC9B7B,ECvGP,SAAgCD,GACnC,IAAMC,EAAa,GACboD,EAAkBrD,EAAMI,QAI9B,OAGJ,SAAoBJ,EAAOC,GAEvB,IADA,IACQY,EAAI,EAAGA,EAAIb,EAAME,OAAQW,IAC7B,IAAI,IAAIC,EAAI,EAAGA,EAAId,EAAME,OAAOW,EAAE,EAAGC,IAGjC,GAFAb,EAAWc,KAAK,CAAC,EAAGD,EAAGA,EAAE,IACzBb,EAAWc,KAAK,CAAC,EAAGD,EAAGA,EAAE,IACtBd,EAAMc,GAAGd,EAAMc,EAAE,GAAG,CAAC,IAAD,EACM,CAACd,EAAMc,EAAE,GAAId,EAAMc,IAA3Cd,EAAMc,GADY,KACRd,EAAMc,EAAE,GADA,KAEnBb,EAAWc,KAAK,CAAC,EAAGD,EAAId,EAAMc,KAC9Bb,EAAWc,KAAK,CAAC,EAAGD,EAAId,EAAMc,KAC9Bb,EAAWc,KAAK,CAAC,EAAGD,EAAE,EAAId,EAAMc,EAAE,KAClCb,EAAWc,KAAK,CAAC,EAAGD,EAAE,EAAId,EAAMc,EAAE,MAjB9CwC,CAAWD,EAAiBpD,GAC5BsD,QAAQC,IAAIH,GACZE,QAAQC,IAAIvD,GACLA,EDiGgBwD,CAAuBxB,KAAKJ,MAAM7B,OAF7C,WAGAa,GACJ,IAAM2B,EAAYC,SAASC,uBAAuB,aAElD,GAAc,IADCzC,EAAWY,GAAG,GACZ,CAAC,IAAD,cAC0BZ,EAAWY,GADrC,GACE8B,GADF,WACaC,EADb,KAEPC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQnC,EAAI,IAAM,EAhGhB,MAHF,OAoGNoC,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC/BnC,EAAE0B,OACH,CACF,IAAMS,EAAQnC,EAAI,IAAM,EAtGhB,MAHF,OA0GNoC,YAAW,WAAO,IAAD,cAC0BhD,EAAWY,GADrC,GACE8B,GADF,WACaQ,EADb,KAEPN,EAAcL,EAAUG,GAAWG,MACzCD,EAAYO,OAAZ,UAAwBD,EAAxB,MACAN,EAAYK,gBAAkBF,IAC/BnC,EAAE0B,KAnBL1B,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAK,EAAnCA,K,+BAyBF,IAAD,OACEb,EAASiC,KAAKJ,MAAd7B,MACP,OACI,6BACI,yBAAK0D,UAAU,iDACX,yBAAKA,UAAU,gBACX,iDACA,2BAAOC,KAAK,QACZvB,IAAI,KACJC,IAAI,MACJuB,aAAc3B,KAAKJ,MAAME,SACzB8B,SAAU,SAAAC,GAAC,OAAI,EAAKC,qBAAqBD,EAAEE,OAAOC,UAClD,+BAAQhC,KAAKJ,MAAME,WAEvB,yBAAK2B,UAAU,gBACX,gDACA,2BAAOC,KAAK,QACZvB,IAAI,IACJC,IAAI,MACJuB,aAAc3B,KAAKJ,MAAMC,MACzB+B,SAAU,SAAAC,GAAC,OAAI,EAAKI,kBAAkBJ,EAAEE,OAAOC,UAC/C,+BAAQhC,KAAKJ,MAAMC,QAEvB,4BAAQ4B,UAAU,+BAA+BS,QAAS,kBAAM,EAAKjC,eAArE,sBACA,4BAAQwB,UAAU,8BAA8BS,QAAS,kBAAM,EAAKC,cAApE,cACA,4BAAQV,UAAU,+BAA+BS,QAAS,kBAAM,EAAKE,cAArE,cACA,4BAAQX,UAAU,+BAA+BS,QAAS,kBAAM,EAAKb,eAArE,gBAEJ,yBAAKI,UAAU,mBACV1D,EAAMsE,KAAI,SAACL,EAAO7C,GAAR,OACP,yBACAsC,UAAU,YACVa,IAAKnD,EACL0B,MAAO,CACHI,gBAvJN,OAwJME,OAAO,GAAD,OAAKa,EAAL,MACNO,MAAM,GAAD,OAAK9D,KAAKC,MAAM,IAAIX,EAAME,QAA1B,kB,GApJcuE,a,MELhCC,MARf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,QCKciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.038ab30f.chunk.js","sourcesContent":["export function getMergeSortAnimation(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    const mainArray = array.slice();\r\n    mergeSortHelper(mainArray, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if(startIdx === endIdx) return;\r\n    const midIdx = Math.floor((startIdx + endIdx)/2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, midIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, midIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, midIdx, endIdx, auxiliaryArray, animations)\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    midIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = midIdx +1;\r\n    while(i <= midIdx && j <= endIdx){\r\n        //Push two comparing indices to the animations array\r\n        //fist push to change the color to SECONDARY_COLOR \r\n        animations.push([i, j]);\r\n        //second to change back to PRIMARY_COLOR\r\n        animations.push([i, j]);\r\n        if(auxiliaryArray[i] <= auxiliaryArray[j]){\r\n            //Push the index and its new height to the animations array\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        }else{\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++]\r\n        }\r\n    }\r\n\r\n    //When one sub-array has done its traversal\r\n    while(i <= midIdx){\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n\r\n    while(j <= endIdx){\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}","export function getQuickSortAnimation(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n\r\n    const auxiliaryArray = array.slice();\r\n    QuickSort(auxiliaryArray, animations);\r\n    \r\n    return animations;\r\n}\r\n\r\n// Find a \"pivot\" element in the array to compare all other\r\n// elements against and then shift elements before or after\r\n// pivot depending on their values\r\nfunction QuickSort(arr, animations, left = 0, right = arr.length - 1) {\r\n    let len = arr.length,\r\n        index\r\n  \r\n    if(len > 1) {\r\n  \r\n      index = partition(arr, animations, left, right)\r\n  \r\n      if(left < index - 1) {\r\n        QuickSort(arr, animations, left, index - 1)\r\n      } \r\n  \r\n      if(index < right) {\r\n        QuickSort(arr, animations, index, right)\r\n      }\r\n  \r\n    }\r\n  \r\n    return arr\r\n  \r\n  }\r\n  \r\n  function partition(arr, animations, left, right) {\r\n    let middle = Math.floor((right + left) / 2),\r\n        pivot = arr[middle],\r\n        i = left,                 // Start pointer at the first item in the array\r\n        j = right                 // Start pointer at the last item in the array\r\n    \r\n    while(i <= j) {\r\n  \r\n      // Move left pointer to the right until the value at the\r\n      // left is greater than the pivot value\r\n      while(arr[i] < pivot) {\r\n        i++\r\n        animations.push([0, i, middle]);\r\n        animations.push([0, i, middle]);\r\n      }\r\n  \r\n      // Move right pointer to the left until the value at the\r\n      // right is less than the pivot value\r\n      while(arr[j] > pivot) {\r\n        j--\r\n        animations.push([0, j, middle]);\r\n        animations.push([0, j, middle]);\r\n      }\r\n  \r\n      // If the left pointer is less than or equal to the \r\n      // right pointer, then swap values\r\n      if(i <= j) {\r\n        [arr[i], arr[j]] = [arr[j], arr[i]]  // ES6 destructuring swap\r\n        animations.push([1, i, arr[i]]);\r\n        animations.push([1, j, arr[j]]);\r\n        i++\r\n        j--\r\n      }\r\n    }\r\n  \r\n    return i\r\n  \r\n  }","import React, { Component } from 'react'\r\nimport './SortingVisualizer.css';\r\nimport { getMergeSortAnimation } from '../SortingAlgorithms/MergeSort';\r\nimport { getQuickSortAnimation } from '../SortingAlgorithms/QuickSort';\r\nimport { getBubbleSortAnimation} from '../SortingAlgorithms/BubbleSort';\r\n// Change this value for the speed of the animations.\r\n// const ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n// const NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'aqua';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class Sortingvisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            speed: 1,\r\n            inputQty: 50,\r\n            array: [],\r\n            toggle: true,\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    handleChangeInputQty(inputQty) {\r\n        this.setState({inputQty: inputQty});\r\n        this.resetArray();\r\n    }\r\n\r\n    handleChangeSpeed(speed) {\r\n        this.setState({speed: speed})\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for(let i = 0; i < this.state.inputQty; i++){\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort(){\r\n        const animationSpeedMs = this.state.speed;\r\n        const animations = getMergeSortAnimation(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 3 !== 2;\r\n            if(isColorChange){\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*animationSpeedMs);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i*animationSpeedMs);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort(){\r\n        const animationSpeedMs = this.state.speed;\r\n        const animations = getQuickSortAnimation(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isSwap = animations[i][0];\r\n            if(isSwap === 0 ){\r\n                const [action, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*animationSpeedMs);\r\n            }else {\r\n                setTimeout(() => {\r\n                    const [action, barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i*animationSpeedMs);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    bubbleSort(){\r\n        const animationSpeedMs = this.state.speed;\r\n        const animations = getBubbleSortAnimation(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isSwap = animations[i][0];\r\n            if(isSwap === 0 ){\r\n                const [action, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*animationSpeedMs);\r\n            }else {\r\n                const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    const [action, barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                    barOneStyle.backgroundColor = color;\r\n                }, i*animationSpeedMs);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state\r\n        return (\r\n            <div>\r\n                <div className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                    <div className=\"form-control\">  \r\n                        <label>Input Quantity</label>\r\n                        <input type=\"range\"\r\n                        min=\"50\"\r\n                        max=\"300\"\r\n                        defaultValue={this.state.inputQty}\r\n                        onChange={e => this.handleChangeInputQty(e.target.value)}></input>\r\n                        <label>{this.state.inputQty}</label>\r\n                    </div>\r\n                    <div className=\"form-control\">\r\n                        <label>Sorting Speed</label>\r\n                        <input type=\"range\"\r\n                        min=\"1\"\r\n                        max=\"100\"\r\n                        defaultValue={this.state.speed}\r\n                        onChange={e => this.handleChangeSpeed(e.target.value)}></input>\r\n                        <label>{this.state.speed}</label> \r\n                    </div>\r\n                    <button className=\"btn btn-success form-control\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n                    <button className=\"btn btn-danger form-control\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button className=\"btn btn-primary form-control\" onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    <button className=\"btn btn-primary form-control\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                </div>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, index) => (\r\n                        <div\r\n                        className=\"array-bar\"\r\n                        key={index}\r\n                        style={{\r\n                            backgroundColor: PRIMARY_COLOR,\r\n                            height: `${value}px`,\r\n                            width: `${Math.floor(800/array.length)}px`,\r\n                        }}></div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","export function getBubbleSortAnimation(array){\r\n    const animations = [];\r\n    const auxiliarayArray = array.slice();\r\n    bubbleSort(auxiliarayArray, animations);\r\n    console.log(auxiliarayArray)\r\n    console.log(animations)\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSort(array, animations){\r\n    let time = 0;\r\n    for(let i = 0; i < array.length; i++){\r\n        for(let j = 0; j < array.length-i-1; j++){\r\n            animations.push([0, j, j+1]);\r\n            animations.push([0, j, j+1]);\r\n            if(array[j]>array[j+1]){\r\n                [array[j], array[j+1]] = [array[j+1], array[j]];    \r\n                animations.push([1, j , array[j]]);\r\n                animations.push([1, j , array[j]]);\r\n                animations.push([1, j+1 , array[j+1]]);\r\n                animations.push([1, j+1 , array[j+1]]);\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualiser/SortingVisualizer'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}